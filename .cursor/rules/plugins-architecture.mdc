---
description:
globs:
alwaysApply: false
---
# Gnostic 插件架构

`gnostic` 支持插件机制，允许扩展其功能以满足不同的 API 处理需求。插件接口的设计借鉴了 `protoc` (Protocol Buffer Compiler) 的插件系统。

## 插件接口定义

- **`plugins/plugin.proto`**: 定义了 `gnostic` 插件必须遵循的 Protocol Buffer 消息格式 ([plugin.proto](mdc:plugins/plugin.proto))。
  插件通过标准输入接收一个 `plugin.Request` 消息，并通过标准输出返回一个 `plugin.Response` 消息。

## 内置插件示例

`plugins/` 目录包含了一些 `gnostic` 插件的实现示例。
- **[plugins/](mdc:plugins/)**: 此目录存放了多个插件的源代码。

### 示例：`gnostic-vocabulary`

- **功能**: `gnostic-vocabulary` 插件用于分析 API 接口中的词汇使用情况，并生成摘要。
- **运行方式**:
  ```bash
  gnostic <input_openapi_file> --vocabulary_out=<output_directory>
  ```
  例如:
  ```bash
  gnostic examples/v2.0/json/petstore.json --vocabulary_out=.
  ```
  这将会在指定的输出目录 (本例中为 `examples/v2.0/json`) 生成 `vocabulary.pb` 和 `vocabulary.json` 文件。
- **输出格式**: `vocabulary.pb` 的格式定义在 [metrics/vocabulary.proto](mdc:metrics/vocabulary.proto)。
- **源代码**: [plugins/gnostic-vocabulary/](mdc:plugins/gnostic-vocabulary/)

## 外部插件

除了内置插件外，还有一些插件作为独立的项目发布：
- **[google/gnostic-grpc](https://github.com/google/gnostic-grpc)**: 生成 gRPC 服务定义。
- **[google/gnostic-go-generator](https://github.com/google/gnostic-go-generator)**: 生成 Go 客户端代码。

## `protoc-gen-openapi` 工具

虽然不是 `gnostic` 的插件，但 `protoc-gen-openapi` 是一个相关的工具，用于从 Protocol Buffer 定义生成 OpenAPI 描述。
- **位置**: [cmd/protoc-gen-openapi/](mdc:cmd/protoc-gen-openapi/)
